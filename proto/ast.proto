// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This is the protobuf representation of the SQL AST from
// https://github.com/andialbrecht/sqlparse

syntax = "proto3";

package sql2pb;

message Ident {
  string value = 1;
  string quote_style = 2;
}

// SQL data type
// https://github.com/andygrove/sqlparser-rs/blob/master/src/ast/data_type.rs
message DataType {
  /// Fixed-length character type e.g. CHAR(10)
  message Char {
    uint64 length = 1;
  }

  /// Variable-length character type e.g. VARCHAR(10)
  message Varchar {
    uint64 length = 1;
  }

  /// Uuid type
  message Uuid {}

  /// Large character object e.g. CLOB(1000)
  message Clob {
    uint64 length = 1;
  }

  /// Fixed-length binary type e.g. BINARY(10)
  message Binary {
    uint64 length = 1;
  }

  /// Variable-length binary type e.g. VARBINARY(10)
  message Varbinary {
    uint64 length = 1;
  }

  /// Large binary object e.g. BLOB(1000)
  message Blob {
    uint64 length = 1;
  }

  /// Decimal type with optional precision and scale e.g. DECIMAL(10,2)
  message Decimal {
    uint64 precision = 1;
    uint64 scale = 2;
  }

  /// Floating point with optional precision e.g. FLOAT(8)
  message Float {
    uint64 length = 1;
  }

  /// Small integer
  message SmallInt {}

  /// Integer
  message Int {}

  /// Big integer
  message BigInt {}

  /// Floating point e.g. REAL
  message Real {}

  /// Double e.g. DOUBLE PRECISION
  message Double {}

  /// Boolean
  message Boolean {}

  /// Date
  message Date {}

  /// Time
  message Time {}

  /// Timestamp
  message Timestamp {}

  /// Interval
  message Interval {}

  /// Regclass used in postgresql serial
  message Regclass {}

  /// Text
  message Text {}

  /// Bytea
  message Bytea {}

  // Custom type such as enums
  message Custom {
    repeated Ident name = 1;
  }

  /// Arrays
  message Array {
    DataType data_type = 1;
  }

  oneof data_type {
    Char char = 1;
    Varchar varchar = 2;
    Uuid uuid = 3;
    Clob clob = 4;
    Binary binary = 5;
    Varbinary varbinary = 6;
    Blob blob = 7;
    Decimal decimal = 8;
    Float float = 9;
    Int int = 10;
    BigInt bigint = 11;
    Real real = 12;
    Double double = 13;
    Boolean boolean = 14;
    Date date = 15;
    Time time = 16;
    Timestamp timestamp = 17;
    Interval interval = 18;
    Regclass regclass = 19;
    Text text = 20;
    Bytea bytea = 21;
    Custom custom = 22;
    Array array = 23;
    SmallInt smallint = 24;
  }
}

message Value {
  oneof v {
    string number = 1;
    string single_quoted_string = 2;
    bool null = 3;
  }
}

/// An SQL expression of any type.
message Expr {


  // A function call
  message Function {
    string name = 1;
    repeated Expr args = 2;
    bool distinct = 3;
    // over
  }

  message BinaryOp {
    enum Operator {
      PLUS = 0;
      MINUS = 1;
      MULTIPLY = 2;
      DIVIDE = 3;
      MODULUS = 4;
      GT = 5;
      LT = 6;
      GT_EQ = 7;
      LT_EQ = 8;
      EQ = 9;
      NOT_EQ = 10;
      AND = 11;
      OR = 12;
      LIKE = 13;
      NOT_LIKE = 14;
    }
    Expr left = 1;
    Operator op = 2;
    Expr right = 3;
  }

  message UnaryOp {
    string op = 1;
    Expr expr = 2;
  }

  message Cast {
    Expr expr = 1;
    string data_type = 2;
  }

  message Case {
    Expr operand = 1;
    repeated Expr conditions = 2;
    repeated Expr results = 3;
    Expr else_result = 4;
  }

  message Nested {
    Expr expr = 1;
  }

  message Parameter {
    Ident name = 1;
    string data_type = 2;
    Value default = 3;
  }

  /// `<expr> [ NOT ] BETWEEN <low> AND <high>`
  message Between {
    Expr expr = 1;
    bool negated = 2;
    Expr low = 3;
    Expr high = 4;
  }

  oneof expr {
    Ident identifier = 1;
    Function function = 2;
    BinaryOp binary_op = 3;
    UnaryOp unary_op = 4;
    Parameter parameter = 5;
    Cast cast = 6;
    Value value = 7;
    Case case = 8;
    Nested nested = 9;
    Between between = 10;
  }
}

/// CreateFunction creates UDFs
message CreateFunction {
  string name = 1;
  repeated Expr args = 2;
  Expr expr = 3;
  bool or_replace = 4;
  bool if_not_exists = 5;
}

message Statement {
  oneof s {
    CreateFunction create_function = 1;
  }
}
