// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This is the protobuf representation of the SQL AST from
// https://github.com/andialbrecht/sqlparse

syntax = "proto3";

package sql2pb;

// An identifier, decomposed into its value or character data and the quote style.
// https://github.com/andygrove/sqlparser-rs/blob/master/src/ast/mod.rs
message Ident {
  string value = 1;
  string quote_style = 2;
}

// A name of a table, view, custom type, etc., possibly multi-part, i.e. db.schema.obj
message ObjectName {
  repeated Ident name = 1;
}

enum DateTimeField {
  YEAR = 0;
  MONTH = 1;
  DAY = 2;
  HOUR = 3;
  MINUTE = 4;
  SECOND = 5;
}

// SQL data type
// https://github.com/andygrove/sqlparser-rs/blob/master/src/ast/data_type.rs
message DataType {
  /// Fixed-length character type e.g. CHAR(10)
  message Char {
    uint64 length = 1;
  }

  /// Variable-length character type e.g. VARCHAR(10)
  message Varchar {
    uint64 length = 1;
  }

  /// Uuid type
  message Uuid {}

  /// Large character object e.g. CLOB(1000)
  message Clob {
    uint64 length = 1;
  }

  /// Fixed-length binary type e.g. BINARY(10)
  message Binary {
    uint64 length = 1;
  }

  /// Variable-length binary type e.g. VARBINARY(10)
  message Varbinary {
    uint64 length = 1;
  }

  /// Large binary object e.g. BLOB(1000)
  message Blob {
    uint64 length = 1;
  }

  /// Decimal type with optional precision and scale e.g. DECIMAL(10,2)
  message Decimal {
    uint64 precision = 1;
    uint64 scale = 2;
  }

  /// Floating point with optional precision e.g. FLOAT(8)
  message Float {
    uint64 length = 1;
  }

  /// Small integer
  message SmallInt {}

  /// Integer
  message Int {}

  /// Big integer
  message BigInt {}

  /// Floating point e.g. REAL
  message Real {}

  /// Double e.g. DOUBLE PRECISION
  message Double {}

  /// Boolean
  message Boolean {}

  /// Date
  message Date {}

  /// Time
  message Time {}

  /// Timestamp
  message Timestamp {}

  /// Interval
  message Interval {}

  /// Regclass used in postgresql serial
  message Regclass {}

  /// Text
  message Text {}

  /// Bytea
  message Bytea {}

  // Custom type such as enums
  message Custom {
    ObjectName name = 1;
  }

  /// Arrays
  message Array {
    DataType data_type = 1;
  }

  oneof data_type {
    Char char = 1;
    Varchar varchar = 2;
    Uuid uuid = 3;
    Clob clob = 4;
    Binary binary = 5;
    Varbinary varbinary = 6;
    Blob blob = 7;
    Decimal decimal = 8;
    Float float = 9;
    Int int = 10;
    BigInt bigint = 11;
    Real real = 12;
    Double double = 13;
    Boolean boolean = 14;
    Date date = 15;
    Time time = 16;
    Timestamp timestamp = 17;
    Interval interval = 18;
    Regclass regclass = 19;
    Text text = 20;
    Bytea bytea = 21;
    Custom custom = 22;
    Array array = 23;
    SmallInt smallint = 24;
  }
}

message Value {
  oneof v {
    string number = 1;
    string single_quoted_string = 2;
    bool null = 3;
  }
}

/// An SQL expression of any type.
message Expr {

  // Identifier e.g. table name or column name
  message Identifier {
    Ident ident = 1;
  }

  // Unqualified wildcard (`*`)
  message Wildcard {}

  // Qualified wildcard, e.g. `alias.*` or `schema.table.*`.
  // (Same caveats apply to `QualifiedWildcard` as to `Wildcard`.)
  message QualifiedWildcard {
    repeated Ident idents = 1;
  }

  /// Multi-part identifier, e.g. `table_alias.column` or `schema.table.col`
  message CompoundIdentifier {
    repeated Ident idents = 1;
  }

  /// `IS NULL` expression
  message IsNull {
    Expr expr = 1;
  }

  /// `IS NOT NULL` expression
  message IsNotNull {
    Expr expr = 1;
  }

  /// `[ NOT ] IN (val1, val2, ...)`
  message InList {
    Expr expr = 1;
    repeated Expr list = 2;
    bool negated = 3;
  }

  /// `[ NOT ] IN (SELECT ...)`
  message InSubquery {
    Expr expr = 1;
    Query subquery = 2;
    bool negated = 3;
  }

  /// `<expr> [ NOT ] BETWEEN <low> AND <high>`
  message Between {
    Expr expr = 1;
    bool negated = 2;
    Expr low = 3;
    Expr high = 4;
  }

  /// Binary operation e.g. `1 + 1` or `foo > bar`
  message BinaryOp {
    enum Operator {
      PLUS = 0;
      MINUS = 1;
      MULTIPLY = 2;
      DIVIDE = 3;
      MODULUS = 4;
      GT = 5;
      LT = 6;
      GT_EQ = 7;
      LT_EQ = 8;
      EQ = 9;
      NOT_EQ = 10;
      AND = 11;
      OR = 12;
      LIKE = 13;
      NOT_LIKE = 14;
    }
    Expr left = 1;
    Operator op = 2;
    Expr right = 3;
  }

  message UnaryOp {
    enum Operator {
      PLUS = 0;
      MINUS = 1;
      NOT = 2;
    }
    Operator op = 1;
    Expr expr = 2;
  }

  message Cast {
    Expr expr = 1;
    string data_type = 2;
  }

  message Case {
    Expr operand = 1;
    repeated Expr conditions = 2;
    repeated Expr results = 3;
    Expr else_result = 4;
  }

  message Extract {
    DateTimeField field = 1;
    Expr expr = 2;
  }

  // `expr COLLATE collation`
  message Collate {
      Expr expr = 1;
      repeated Ident collation = 2;
  }

  // Nested expression e.g. `(foo > bar)` or `(1)`
  message Nested {
    Expr expr = 1;
  }

  /// A literal value, such as string, number, date or NULL
  // Name it to ValueExpr to avoid conflict with the root level Value message
  message ValueExpr {
    Value value = 1;
  }

  // function parameter
  message Parameter {
    Ident name = 1;
    string data_type = 2;
    Value default = 3;
  }

  // A function call
  message Function {
    string name = 1;
    repeated Expr args = 2;
    bool distinct = 3;
    // over
  }

  // An exists expression `EXISTS(SELECT ...)`, used in expressions like
  // `WHERE EXISTS (SELECT ...)`.
  message Exists {
    Query query = 1;
  }

  // A parenthesized subquery `(SELECT ...)`, used in expression like
  // `SELECT (subquery) AS x` or `WHERE (subquery) = x`
  message Subquery {
    Query query = 1;
  }

  oneof expr {
    Identifier identifier = 1;
    Wildcard wildcard = 2;
    QualifiedWildcard qualified_wildcard = 3;
    CompoundIdentifier compound_identifier = 4;
    IsNull is_null = 5;
    IsNotNull is_not_null = 6;
    InList in_list = 7;
    InSubquery in_subquery = 8;
    Between between = 9;
    BinaryOp binary_op = 10;
    UnaryOp unary_op = 11;
    Cast cast = 12;
    Extract extract = 13;
    Collate collate = 14;
    Nested nested = 15;
    ValueExpr value = 16;
    Function function = 17;
    Case case = 18;
    Exists exists = 19;
    Subquery subquery = 20;
    Parameter parameter = 21;
  }
}

message TableAlias {
  Ident name = 1;
  repeated Ident columns = 2;
}

/// SQL ORDER BY expression
message OrderByExpr {
  Expr expr = 1;
  bool asc = 2;
}

/// A single CTE (used after `WITH`): `alias [(col1, col2, ...)] AS ( query )`
message Cte {
  TableAlias alias = 1;
  Query query = 2;
}

/// SQL semantic equivalent of LIMIT but with same structure as FETCH.
message Top {
  bool with_ties = 1;
  bool percent = 2;
  Expr quantity = 3;
}

message Fetch {
  bool with_ties = 1;
  bool percent = 2;
  Expr quantity = 3;
}

message Join {

  /// JoinConstraint in sqlparser
  message Constraint {
    message On {
      Expr expr = 1;
    }

    message Using {
      repeated Ident ident = 1;
    }

    message Natural {}

    oneof constraint {
      On on = 1;
      Using using = 2;
      Natural natural = 3;
    }
  }

  message Operator {
    message Inner {
      Constraint constraint = 1;
    }

    message LeftOuter {
      Constraint constraint = 1;
    }

    message RightOuter {
      Constraint constraint = 1;
    }

    message FullOuter {
      Constraint constraint = 1;
    }

    message CrossJoin {}

    /// CROSS APPLY (non-standard)
    message CrossApply {}

    /// OUTER APPLY (non-standard)
    message OuterApply {}
  }

  TableFactor relation = 1;

  Operator join_operator = 2;
}

/// A table name or a parenthesized subquery with an optional alias
message TableFactor {
  message Table {
    ObjectName name = 1;
    TableAlias alias = 2;
    repeated Expr args = 3;
    repeated Expr with_hints = 4;
  }

  message Derived {
    bool lateral = 1;
    Query subquery = 2;
    TableAlias alias = 3;
  }

  message NestedJoin {}

  oneof factor {
    Table table = 1;
    Derived derived = 2;
    NestedJoin nested_join = 3;
  }
}

message TableWithJoins {
  TableFactor relation = 1;
  repeated Join joins = 2;
}

message SelectItem {
  message UnnamedExpr {
    Expr expr = 1;
  }

  message ExprWithAlias {
    Expr expr = 1;
    Ident alias = 2;
  }

  message QualifiedWildcard {
    repeated Ident name = 1;
  }

  message Wildcard {}

  oneof item {
    UnnamedExpr unnamed_expr = 1;
    ExprWithAlias expr_with_alias = 2;
    QualifiedWildcard qualified_wildcard = 3;
    Wildcard wildcard = 4;
  }
}

message Select {
  bool distinct = 1;
  Top top = 2;
  repeated SelectItem projection = 3;
  repeated TableWithJoins from = 4;
  Expr selection = 5;
  repeated Expr group_by = 6;
  Expr having = 7;
}

message SetExpr {

  message SetOperation {
    // Operator is SetOperator in sqlparser-rs.
    // Move here to make the namespace cleaner.
    enum Operator {
      UNION = 0;
      EXCEPT = 1;
      INTERSECT = 2;
    }

    Operator op = 1;
    bool all = 2;
    SetExpr left = 3;
    SetExpr right = 4;
  }

  oneof expr {
    Query query = 2;
    SetOperation set_operation = 3;
  }
}

/// The most complete variant of a `SELECT` query expression, optionally
/// including `WITH`, `UNION` / other set operations, and `ORDER BY`.
message Query {
  /// WITH (common table expressions, or CTEs)
  repeated Cte ctes = 1;
  /// SELECT or UNION / EXCEPT / INTECEPT
  SetExpr body = 2;
  /// ORDER BY
  repeated OrderByExpr order_by = 3;
  /// `LIMIT { <N> | ALL }`
  Expr limit = 4;
  /// `OFFSET <N> { ROW | ROWS }`
  Expr offset = 5;
  /// `FETCH { FIRST | NEXT } <N> [ PERCENT ] { ROW | ROWS } | { ONLY | WITH TIES }`
  Fetch fetch = 6;
}

/// A top-level statement (SELECT, INSERT, CREATE, etc.)
message Statement {
  /// CreateFunction creates UDFs
  message CreateFunction {
    string name = 1;
    repeated Expr args = 2;
    DataType returns = 3;
    Expr expr = 4;
    bool or_replace = 5;
    bool if_not_exists = 6;
    bool temporary = 7;
  }

  oneof s {
    Query query = 1;
    CreateFunction create_function = 2;
  }
}
